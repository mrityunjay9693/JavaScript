JavaScript: JavaScript is a leight-weight, high-level, and interpreted programming language which is compatible with the
            object-oriented and functional programming approach. JavaScript is popular for the language of dynamic in 
            nature. It is primarly used for building interactive and dynamic web-pages and web applications. The JavaScript
            is completely different from the Java programming language. JS has nothing to do with Java. Syntax of both 
            language is completely different from each other. Both has its own specific identity and features.
          ->JavaScript has started its journey since its birth as scripting lamguage roots and as the couple of decade 
            passes scince its birth, it evolves itself towards efficient general-purpose programming language which now
            become suitable for serious software engineering and application develpment. It has now huge codebases and rich
            community has has all answer related to issues while developing application with JavaScript. In simple word, 
            it has rich community and become a idol for professionals. 
          ->JavaScript is the primarly known for the programming language of the job.
          ->JavaScript is a "backward compatible programming language". This means, it will support all the features which
            came many years ago.
          ->JavaScript is not "forward compatible programming language". This means if you are using older version of your 
            browser and using current featuresof JS, then that features will not support in your browser with older 
            version. You have to keep update your browser time to time.
          ->For any programming language, to be useful they need a dedicated platform, rich standard library, and need of 
            basic input and output to perform and these things were absence in JavaScript since its birth till the day 
            node arrives. It is important to note that, core JavaScript languages state a minimal API that works with 
            numbers, text, arrays, map, and many more such things which provides only essential functionalities required for
            a specific purpose, bit the core JavaScript was unable to provide taking input and output functionality for the
            user. Not only, input/output but also some more sophisticated features such as networking, storage, and graphics.
            It was browser responsibility to take input/output functionality. Then browser were the "host environment" for
            the JavaScript in which it is embedded. It is the browser which is the original host environment for the JS and
            still, the most common and widely used execution environment for JavaScript where the programmer interprets 
            their code, doing input/output and debugging codes.  


->In JavaScript, to print anything(a message, value..etc) to the console using the "console.log()" function(method).
  Whatever is given to this function, let's say a message, inside it's parenthesis, it will output the message to the
  browser's console.

console.log() : console.log() is a method in JavaScript used to print or display messages to the browser's console.
                It is primarily used for debugging purposes by developers to output information, variables, and results during
                the execution of the code.
            
                Syntax : console.log(message);
              
               *We can pass multiple values to console.log() function and it will print them in the order they are passed.

->console.log() function primarily outputs the messages to the browser's console, but depending opn the environment where 
  JavaScript is being run, it can also output elsewhere. We have four possible execution environments or runtime environment
  where the output of console.log() funtion is displayed, mentioned as below: 
  1)Browser Console.
  2)Node,js Environment.
  3)Web Development Tools.
  4)Debugging Tools.    

1)Browser Console: When running JavaScript code in a browser such as Chrome, Firefox, etc, console.log() outputs messages 
                   to the browser's console(accessible via Developer Tools). Browser console is a debugging environmant 
                   within the web browser.

2)Node,js Environment: Node.js is a server-side execution environment for running JavaScript code outside the browser. When 
                       running JavaScript code, console.log() outputs the messages to the terminal or command line, where the
                       Node.js process is running.    

3)Web Development Tools: If you are using development tools like React Native, console.log() function will print messages to
                         the console of the development environment, or tools like Metro bundler(React Native's development 
                         tool).

4)Debugging Tools: In some advanced debugging setup(using tools like vs code or Chrome DevTools), console.log() function will 
                   print messages may also appear in those environment's debugging pannels.

->In general, though, console.log() doesn't create a visual output in the webpage or user interface (UI). For that, you'd 
  use something like document.write() or DOM manipulation methods to display content directly in the browser's visible window.
    
->In JS, string can be written within double quotation as well as single quotes both.   
  
  Example: console.log("Hello World");
           console.log("Welcome to tilde...");

->We can terminate line use semi-colon or without semi-colon. Using semi-colon is a good pracice.  
    
Backtick(``) : Sometime it is called template literals or template strings which is anotherway to type out a string whithin 
               ``. It is called backtick or grave accent. You can also use backtick for using string inside it.
               Backtick is used in string template. We will discuss string template later.
               We will see it later.
               
               Example: console.log(`Backtick.`); 
                        output : Backtick.









****************************************************Variables**************************************************************

Variables:->Variable in JavaScript is the most basic building block programming entity which is used to store information.
            And, these information can be used in the program later and if possible, can be altred. 
          ->In other words it can be defined as : Variable is an container which is used to store a value like like a 
            number or string and can store any type of JavaScript values.
          ->A variable is a named container for a particular set of bits or type of data like integer, float, string etc.
          ->A variable in JavaScript is a named storage for data.
          ->Variable name in JavaScript in case-sensitive.
    
          ->Variable in JavaScript is the most basic building block programming entity which is used to :
              a)store information.
              b)and,these information can be used in the program later 
              c)and, if possible, can be altred/changed. 
          
          ->Variable name in JavaScript in case-sensitive.
    
 Creation/Declaration of Variable in JS :
        ->Systax : 
                  var/let/const variable_name = values;  
                    
                    eg: 1)var num = 12;
                          let num1 = 123;
                          const name1 = "JavaScript."
                          console.log(num, num1, name1);
                    output: 12, 123, JavaScript.
            
        * values/data/information can be : an integer, a string etc.
        * var/let/const are the keyword in JavaScript which is used to create any programming entity as variable.

Rules for naming "variable": Following are the rules while naming a variable described as below: 
      1.First character of a variable should not be any digit/number.We cannot start naming variable with 
        digit/number.
      2.While naming a variable name, a letter(alphabets), dollar sign($), and an underscore sign( _ ) can be used as 
        first character of a variable name.
      3.Only dollar sign($) and underscore( _ ) are the special symbols allowed for naming a variable name. Apart from dollar 
        sign and underscore, other special characters are not allowed.
      3.Spaces are not allowed within the characters of a variable name.
      4.Reserved keywords are not allowed for naming a variable name.
      5.Variable names are case-sensitive and we must takle care about its case.
      6.We use camelCase while naming a variable name in JavaScript. camelCase is the naming convention for naming a variable.
 
**************************************************----String----**************************************************************

String:-> String is defined as the sequence of characters or collection of characters is called string.
       -> In JavaScript, anything you write down within the pair of single/double quotation mark is known as string. 
       -> Values within the pair of single/double quotation are string whic are made up of sequence of characters, 
          consists of letters, numbers, symbol, and even emojis.

Creating of Strings:->Strings in JavaScript can be created in two ways, either putting values in quotations 
                      or as object. The two ways for creating strings in JS ,mentioned below:
                      a)String created as primitives, from string literals(putting values in quotes)
                      b)String created as object, using the String() constructor(new String()).

POINTS: a)In JavaScript's string, every character of the string has its own index i.e,, position.
        b)Index/position of characters in string starting from Zero(0) that means it is Zero-based( based) indexing.
        